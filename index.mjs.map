{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Planck distribution with shape parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.4 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 0.5, 1.4 );\n* // returns 0.0\n*\n* @example\n* var y = quantile( 0.9, 2.1 );\n* // returns 1.0\n*\n* @example\n* var y = quantile( 0.2, -0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.8 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.4, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 1.5, 1.0 );\n* // returns NaN\n*/\nfunction quantile( p, lambda ) {\n\tif ( isnan( lambda ) || isnan( p ) || lambda <= 0.0 || p < 0.0 || p > 1.0 ) { // eslint-disable-line max-len\n\t\treturn NaN;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn ceil( -ln( 1.0-p ) / lambda ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Planck distribution with shape parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n* var y = quantile( 0.4 );\n* // returns 1.0\n*\n* y = quantile( 0.8 );\n* // returns 4.0\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Planck distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn ceil( -ln( 1.0-p ) / lambda ) - 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Planck distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-planck-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-planck-quantile';\n*\n* var y = quantile( 0.8, 0.4 );\n* // returns 4.0\n*\n* y = quantile( 0.5, 1.4 );\n* // returns 0.0\n*\n* var myquantile = quantile.factory( 0.4 );\n* y = myquantile( 0.4 );\n* // returns 1.0\n*\n* y = myquantile( 0.8 );\n* // returns 4.0\n*\n* y = myquantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["quantile","p","lambda","isnan","NaN","PINF","ceil","ln","factory","constantFunction","setReadOnly","main"],"mappings":";;6lBAqEA,SAASA,EAAUC,EAAGC,GACrB,OAAKC,EAAOD,IAAYC,EAAOF,IAAOC,GAAU,GAAOD,EAAI,GAAOA,EAAI,EAC9DG,IAEG,IAANH,EACGI,EAEDC,GAAOC,EAAI,EAAIN,GAAMC,GAAW,CACxC,CC7BA,SAASM,EAASN,GACjB,OAAKC,EAAOD,IAAYA,GAAU,EAC1BO,EAAkBL,KAe1B,SAAmBH,GAClB,GAAKE,EAAOF,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOG,IAER,GAAW,IAANH,EACJ,OAAOI,EAER,OAAOC,GAAOC,EAAI,EAAIN,GAAMC,GAAW,CACvC,CACF,CCpBAQ,EAAAC,EAAA,UAAAH"}